{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:50",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "e174671a9197905862d4028c38dc1cc4161e6988a3b6b4bce948d4f8ae904ec5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "5da5c32070dce438f68dcce8ac87ca9c33bdec5c11d3bff66b4976da4ac5983c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "95875c262996f43a5d99eb3e4f97a7020f1d6862a7fa69f690dfcdd62a209352",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "6148f59783bae140ed8f7410c63f62cf0c7cf39fec885ffc58a52424da9a584d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "cbb8a4119db4c5a589881820f2e7dc83a1fae729072c181e292a29555ab06915",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts/Diamond.sol:Diamond": {
        "src": "contracts/Diamond.sol:7",
        "version": {
          "withMetadata": "372d8bb4d3f5c9cd1ed9c06afa1a3f77ca2e4de1a24b995d90fb237b2ce9045c",
          "withoutMetadata": "6bd382e3eee011ee12229f96b208c480d7ed67e2741443dfda8bf9f603244d48",
          "linkedWithoutMetadata": "6bd382e3eee011ee12229f96b208c480d7ed67e2741443dfda8bf9f603244d48"
        },
        "inherit": [],
        "libraries": [
          "hardhat/console.sol:console"
        ],
        "methods": [
          "(address)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Diamond",
            "src": "contracts/Diamond.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "diamondCutFacet",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Diamond",
              "src": "contracts/Diamond.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts/DiamondCutFacet.sol:DiamondCutFacet": {
        "src": "contracts/DiamondCutFacet.sol:8",
        "version": {
          "withMetadata": "df51b11c29bd5618f454c5ee758ff51d1e9de0522d0349a3cd018c4544900bba",
          "withoutMetadata": "3c2f668234f113bd45ee9ae1f6753de903034462bffcc0ca48ce4170bbbc0d7d",
          "linkedWithoutMetadata": "3c2f668234f113bd45ee9ae1f6753de903034462bffcc0ca48ce4170bbbc0d7d"
        },
        "inherit": [
          "contracts/DiamondGovernance.sol:DiamondGovernance",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/interfaces/IDiamondCut.sol:IDiamondCut"
        ],
        "libraries": [],
        "methods": [
          "diamondCut(struct IDiamondCut.FacetCut[],address,bytes)",
          "getFacetAddress(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts/DiamondCutFacet.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts/DiamondGovernance.sol:DiamondGovernance": {
        "src": "contracts/DiamondGovernance.sol:6",
        "version": {
          "withMetadata": "a18f3eb236b66c2d410ee0f6a2abba1f8665c4b988f7f07d405eac44d99c1738",
          "withoutMetadata": "8d99e0b127eaf75f77b7140d6ea6693c2ce67a5bc236da513b740099ca7ab473",
          "linkedWithoutMetadata": "8d99e0b127eaf75f77b7140d6ea6693c2ce67a5bc236da513b740099ca7ab473"
        },
        "inherit": [
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "addUpgradeAdmin(address)",
          "removeUpgradeAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DiamondGovernance",
            "src": "contracts/DiamondGovernance.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts/PriceAggregator.sol:PriceAggregator": {
        "src": "contracts/PriceAggregator.sol:7",
        "version": {
          "withMetadata": "f951338c1cac4148ce04f9e832a6f34cf05175f12b808bb0eb64297ab5b34b7d",
          "withoutMetadata": "93d9e0d7cd17828fde5b1f02fcad2672a48d2ec08d179a2ec86e298e95b0081a",
          "linkedWithoutMetadata": "93d9e0d7cd17828fde5b1f02fcad2672a48d2ec08d179a2ec86e298e95b0081a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "getLatestPrice(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceAggregator",
            "src": "contracts/PriceAggregator.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "registry",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(PriceFeedRegistry)3143",
              "contract": "PriceAggregator",
              "src": "contracts/PriceAggregator.sol:8"
            }
          ],
          "types": {
            "t_contract(PriceFeedRegistry)3143": {
              "label": "contract PriceFeedRegistry",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts/PriceFeedRegistery.sol:PriceFeedRegistry": {
        "src": "contracts/PriceFeedRegistery.sol:6",
        "version": {
          "withMetadata": "7d7b1ee55e8e855d9ef21fc5ae51ce0477bbaa512f52e7c3b205c207bfb14333",
          "withoutMetadata": "6263508e249a1a2e05f5ffcb35da848186cb89cf6d62a83caf09e87d357f42cc",
          "linkedWithoutMetadata": "6263508e249a1a2e05f5ffcb35da848186cb89cf6d62a83caf09e87d357f42cc"
        },
        "inherit": [
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setPriceFeed(address,address)",
          "getPriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceFeedRegistry",
            "src": "contracts/PriceFeedRegistery.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "tokenToPriceFeed",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "PriceFeedRegistry",
              "src": "contracts/PriceFeedRegistery.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts/TFacet.sol:TestFacet": {
        "src": "contracts/TFacet.sol:6",
        "version": {
          "withMetadata": "f68674bd3115b76c1c7100974957715aeaf9e6fafdeac8dd904dcfd9d35b172a",
          "withoutMetadata": "25c04f588f2662a6154e2f233257092be14aa78e3cd24dd1e4a7dfd78004a44b",
          "linkedWithoutMetadata": "25c04f588f2662a6154e2f233257092be14aa78e3cd24dd1e4a7dfd78004a44b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "testFunction()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts/facets/DCAFacet.sol:DCAFacet": {
        "src": "contracts/facets/DCAFacet.sol:15",
        "version": {
          "withMetadata": "edc450ca9384d26573da3a40ff7180fa1f038ed2c03f941c2129fee4e7cb6266",
          "withoutMetadata": "546d0d33bbd972a85573b21e7185129c4a19a241c1642af4af2d81e0f89eaa62",
          "linkedWithoutMetadata": "546d0d33bbd972a85573b21e7185129c4a19a241c1642af4af2d81e0f89eaa62"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "hardhat/console.sol:console"
        ],
        "methods": [
          "(address,address)",
          "setFees(uint256)",
          "setupDCA(address,address,uint256,uint256,uint256)",
          "getOrderDetails(address,uint256)",
          "getAllOrders(address)",
          "getAllActiveOrders(address)",
          "executeDCA(uint256)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DCAFacet",
            "src": "contracts/facets/DCAFacet.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "priceAggregator",
            "src": "contracts/facets/DCAFacet.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapRouter",
            "src": "contracts/facets/DCAFacet.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeRate",
            "src": "contracts/facets/DCAFacet.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "feeRate",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "DCAFacet",
              "src": "contracts/facets/DCAFacet.sol:38"
            },
            {
              "label": "userOrders",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_array(t_struct(DCAOrder)3193_storage)dyn_storage)",
              "contract": "DCAFacet",
              "src": "contracts/facets/DCAFacet.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(DCAOrder)3193_storage)dyn_storage": {
              "label": "struct DCAFacet.DCAOrder[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(DCAOrder)3193_storage)dyn_storage)": {
              "label": "mapping(address => struct DCAFacet.DCAOrder[])",
              "numberOfBytes": "32"
            },
            "t_struct(DCAOrder)3193_storage": {
              "label": "struct DCAFacet.DCAOrder",
              "members": [
                {
                  "label": "fromToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "toToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amountPerInterval",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "interval",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "nextExecutionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "orderCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "ordersPlaced",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts/facets/DCAFacet.sol:IAggregatorV3": {
        "src": "contracts/facets/DCAFacet.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLatestPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts/facets/MultiBatchSwapFacet.sol:MultiBatchSwapFacet": {
        "src": "contracts/facets/MultiBatchSwapFacet.sol:12",
        "version": {
          "withMetadata": "cc4832f57ac3cedc298233163d439551784ff19853d122a2ba45b6bc994a72f8",
          "withoutMetadata": "9b98bce5c6ac89251c12ca0810ad83f709569183da1cf8d5097bd46062e0c0d8",
          "linkedWithoutMetadata": "9b98bce5c6ac89251c12ca0810ad83f709569183da1cf8d5097bd46062e0c0d8"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "hardhat/console.sol:console"
        ],
        "methods": [
          "(address,address)",
          "batchSwapsToSingleToken(address[],uint256[],address,address,uint256)",
          "batchSwapToSingleToken(address,address,uint256,address)",
          "setFeeBasisPoints(uint256)",
          "estimateSwapOutput(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MultiBatchSwapFacet",
            "src": "contracts/facets/MultiBatchSwapFacet.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapRouter",
            "src": "contracts/facets/MultiBatchSwapFacet.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapFactory",
            "src": "contracts/facets/MultiBatchSwapFacet.sol:16"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeBasisPoints",
            "src": "contracts/facets/MultiBatchSwapFacet.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "feeBasisPoints",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "MultiBatchSwapFacet",
              "src": "contracts/facets/MultiBatchSwapFacet.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts/facets/TokenManagementFacet.sol:TokenManagementFacet": {
        "src": "contracts/facets/TokenManagementFacet.sol:6",
        "version": {
          "withMetadata": "228721ed34d1bd2d427f001b4a239d950557ed35257100d91db9cce3beba5c1c",
          "withoutMetadata": "c4d60240607769ed3195832ccbf7109d0a5ac4560f020d026e495e8389eb37d8",
          "linkedWithoutMetadata": "c4d60240607769ed3195832ccbf7109d0a5ac4560f020d026e495e8389eb37d8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenBalance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts/interfaces/IAggregatorV3.sol:IAggregatorV3": {
        "src": "contracts/interfaces/IAggregatorV3.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts/interfaces/IDCA.sol:IDCA": {
        "src": "contracts/interfaces/IDCA.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setupDCA(address,uint256,uint256,uint256)",
          "executeDCA(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts/interfaces/IDiamondCut.sol:IDiamondCut": {
        "src": "contracts/interfaces/IDiamondCut.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "diamondCut(struct IDiamondCut.FacetCut[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts/interfaces/IUniswapV2Factory.sol:IUniswapV2Factory": {
        "src": "contracts/interfaces/IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts/interfaces/IUniswapV2Router.sol:IUniswapV2Router": {
        "src": "contracts/interfaces/IUniswapV2Router.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "70bae06d418d0435585e4e314dd95dad76592ffca51924d2d1d19adf5d746921",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      }
    }
  ]
}