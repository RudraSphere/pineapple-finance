/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MultiBatchSwapFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BPS_DIVISOR"
      | "batchSwapToSingleToken"
      | "batchSwapsToSingleToken"
      | "estimateSwapOutput"
      | "estimateSwapOutputs"
      | "feeBasisPoints"
      | "setFeeBasisPoints"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "FeesCollected"): EventFragment;

  encodeFunctionData(
    functionFragment: "BPS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchSwapToSingleToken",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSwapsToSingleToken",
    values: [
      AddressLike[],
      BigNumberish[],
      AddressLike,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateSwapOutput",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateSwapOutputs",
    values: [AddressLike[], BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBasisPoints",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BPS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSwapToSingleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSwapsToSingleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateSwapOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateSwapOutputs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeBasisPoints",
    data: BytesLike
  ): Result;
}

export namespace FeesCollectedEvent {
  export type InputTuple = [collector: AddressLike, feeAmount: BigNumberish];
  export type OutputTuple = [collector: string, feeAmount: bigint];
  export interface OutputObject {
    collector: string;
    feeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultiBatchSwapFacet extends BaseContract {
  connect(runner?: ContractRunner | null): MultiBatchSwapFacet;
  waitForDeployment(): Promise<this>;

  interface: MultiBatchSwapFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BPS_DIVISOR: TypedContractMethod<[], [bigint], "view">;

  batchSwapToSingleToken: TypedContractMethod<
    [
      fromToken: AddressLike,
      toToken: AddressLike,
      amount: BigNumberish,
      recipient: AddressLike
    ],
    [[bigint, boolean] & { _amountGot: bigint; isSuccess: boolean }],
    "nonpayable"
  >;

  batchSwapsToSingleToken: TypedContractMethod<
    [
      inputTokens: AddressLike[],
      inputAmounts: BigNumberish[],
      outputToken: AddressLike,
      recipient: AddressLike,
      slippageTolerance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  estimateSwapOutput: TypedContractMethod<
    [fromToken: AddressLike, toToken: AddressLike, inputAmount: BigNumberish],
    [bigint[]],
    "nonpayable"
  >;

  estimateSwapOutputs: TypedContractMethod<
    [
      inputTokens: AddressLike[],
      inputAmounts: BigNumberish[],
      outputToken: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  feeBasisPoints: TypedContractMethod<[], [bigint], "view">;

  setFeeBasisPoints: TypedContractMethod<
    [newFeeBPS: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BPS_DIVISOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchSwapToSingleToken"
  ): TypedContractMethod<
    [
      fromToken: AddressLike,
      toToken: AddressLike,
      amount: BigNumberish,
      recipient: AddressLike
    ],
    [[bigint, boolean] & { _amountGot: bigint; isSuccess: boolean }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchSwapsToSingleToken"
  ): TypedContractMethod<
    [
      inputTokens: AddressLike[],
      inputAmounts: BigNumberish[],
      outputToken: AddressLike,
      recipient: AddressLike,
      slippageTolerance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "estimateSwapOutput"
  ): TypedContractMethod<
    [fromToken: AddressLike, toToken: AddressLike, inputAmount: BigNumberish],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "estimateSwapOutputs"
  ): TypedContractMethod<
    [
      inputTokens: AddressLike[],
      inputAmounts: BigNumberish[],
      outputToken: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeBasisPoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setFeeBasisPoints"
  ): TypedContractMethod<[newFeeBPS: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "FeesCollected"
  ): TypedContractEvent<
    FeesCollectedEvent.InputTuple,
    FeesCollectedEvent.OutputTuple,
    FeesCollectedEvent.OutputObject
  >;

  filters: {
    "FeesCollected(address,uint256)": TypedContractEvent<
      FeesCollectedEvent.InputTuple,
      FeesCollectedEvent.OutputTuple,
      FeesCollectedEvent.OutputObject
    >;
    FeesCollected: TypedContractEvent<
      FeesCollectedEvent.InputTuple,
      FeesCollectedEvent.OutputTuple,
      FeesCollectedEvent.OutputObject
    >;
  };
}
