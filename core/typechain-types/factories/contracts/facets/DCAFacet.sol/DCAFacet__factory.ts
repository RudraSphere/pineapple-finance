/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  DCAFacet,
  DCAFacetInterface,
} from "../../../../contracts/facets/DCAFacet.sol/DCAFacet";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "AllOrdersExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "toToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "DCAExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "toToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "orderCount",
        type: "uint256",
      },
    ],
    name: "DCASetup",
    type: "event",
  },
  {
    inputs: [],
    name: "FEE_DECIMALS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "executeDCA",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "feeRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getAllActiveOrders",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "fromToken",
                type: "address",
              },
              {
                internalType: "address",
                name: "toToken",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "totalAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amountPerInterval",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "interval",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "nextExecutionTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "orderCount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "ordersPlaced",
                type: "uint256",
              },
            ],
            internalType: "struct DCAFacet.DCAOrder",
            name: "order",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "remainingAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "currentValue",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "currentPrice",
            type: "int256",
          },
        ],
        internalType: "struct DCAFacet.OrderDetail[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getAllOrders",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "fromToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "toToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "totalAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountPerInterval",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "interval",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nextExecutionTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "orderCount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ordersPlaced",
            type: "uint256",
          },
        ],
        internalType: "struct DCAFacet.DCAOrder[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getOrderDetails",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "fromToken",
                type: "address",
              },
              {
                internalType: "address",
                name: "toToken",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "totalAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amountPerInterval",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "interval",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "nextExecutionTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "orderCount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "ordersPlaced",
                type: "uint256",
              },
            ],
            internalType: "struct DCAFacet.DCAOrder",
            name: "order",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "remainingAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "currentValue",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "currentPrice",
            type: "int256",
          },
        ],
        internalType: "struct DCAFacet.OrderDetail",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_fromToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_toToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_totalAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_interval",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_orderCount",
        type: "uint256",
      },
    ],
    name: "setupDCA",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "userOrders",
    outputs: [
      {
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "toToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "totalAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountPerInterval",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "nextExecutionTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "orderCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ordersPlaced",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260fa60015534801561001557600080fd5b50600160005561176f8061002a6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063856652e911610066578063856652e91461011c578063978bbdb914610175578063a13abdad1461018c578063b5fec1ff146101a4578063ccf288c6146101c457600080fd5b80631b36c6c2146100a35780631f7d5689146100cc578063373ad320146100e1578063562e07cd146100f45780636e4d243a14610114575b600080fd5b6100b66100b1366004611339565b6101cd565b6040516100c391906113ef565b60405180910390f35b6100df6100da36600461143e565b6103f5565b005b6100df6100ef366004611457565b6107bf565b6101076101023660046114a4565b610b10565b6040516100c391906114ce565b6100df610c8c565b61012f61012a3660046114a4565b610d0f565b604080516001600160a01b03998a168152989097166020890152958701949094526060860192909252608085015260a084015260c083015260e0820152610100016100c3565b61017e60015481565b6040519081526020016100c3565b610194610d7d565b60405190151581526020016100c3565b6101b76101b2366004611339565b610def565b6040516100c391906114dd565b61017e61271081565b60606000805b6001600160a01b03841660009081526002602052604090205481101561029d576001600160a01b038416600090815260026020526040902080548290811061021d5761021d611520565b90600052602060002090600802016006015460026000866001600160a01b03166001600160a01b03168152602001908152602001600020828154811061026557610265611520565b906000526020600020906008020160070154101561028b57816102878161154c565b9250505b806102958161154c565b9150506101d3565b5060008167ffffffffffffffff8111156102b9576102b9611567565b6040519080825280602002602001820160405280156102f257816020015b6102df611296565b8152602001906001900390816102d75790505b5090506000805b6001600160a01b0386166000908152600260205260409020548110156103eb576001600160a01b038616600090815260026020526040902080548290811061034357610343611520565b90600052602060002090600802016006015460026000886001600160a01b03166001600160a01b03168152602001908152602001600020828154811061038b5761038b611520565b90600052602060002090600802016007015410156103d9576103ad8682610b10565b8383815181106103bf576103bf611520565b602002602001018190525081806103d59061154c565b9250505b806103e38161154c565b9150506102f9565b5090949350505050565b33600090815260026020526040812080548390811061041657610416611520565b9060005260206000209060080201905080600501544210156104765760405162461bcd60e51b8152602060048201526014602482015273546f6f206561726c7920746f206578656375746560601b60448201526064015b60405180910390fd5b80600601548160070154106104cd5760405162461bcd60e51b815260206004820152601760248201527f4f7264657220616c726561647920636f6d706c65746564000000000000000000604482015260640161046d565b61050d6040518060400160405280601981526020017f457865637574696e672044434120666f722075736572202573000000000000008152503330610ebd565b80546001600160a01b031663095ea7b361054e7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1321546001600160a01b031690565b60038401546040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561059e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c2919061158d565b5060006105f67fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1321546001600160a01b031690565b825460018401546003850154604051630562f92360e51b81526001600160a01b03938416600482015291831660248301526044820152600060648201523360848201523060a482015291169063ac5f24609060c40160408051808303816000875af1158015610669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068d91906115a8565b915050806106e75760405162461bcd60e51b815260206004820152602160248201527f44434146616365743a3a657865637574654443413a2053776170206661696c656044820152601960fa1b606482015260840161046d565b6007820180549060006106f98361154c565b9190505550816004015482600501600082825461071691906115d4565b9091555050815460018301546003840154604080516001600160a01b0394851681529390921660208401529082015233907f58db8ce4db80121275a9378c82683c7bcd829d1e65b3613d4cf082f0259277369060600160405180910390a28160060154826007015414156107ba5760405183815233907fea13d8565b9ca41d98f496aaaa6714c5e50977f61d9e0db0a9f64dd611b343729060200160405180910390a25b505050565b600082116108065760405162461bcd60e51b81526020600482015260146024820152730496e74657276616c206d757374206265203e20360641b604482015260640161046d565b600081116108565760405162461bcd60e51b815260206004820152601760248201527f4f7264657220636f756e74206d757374206265203e2030000000000000000000604482015260640161046d565b8083101561089d5760405162461bcd60e51b8152602060048201526014602482015273546f74616c20616d6f756e7420746f6f206c6f7760601b604482015260640161046d565b6108b26001600160a01b038616333086610f04565b604080518082018252601b81527f4443413a3a42616c616e6365204166746572205472616e736665720000000000602082015290516370a0823160e01b815230600482015261095691906001600160a01b038816906370a0823190602401602060405180830381865afa15801561092d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095191906115ec565b610f64565b6000612710600154856109699190611605565b6109739190611624565b905060006109818286611646565b9050600061098f8483611624565b905060026000336001600160a01b03166001600160a01b031681526020019081526020016000206040518061010001604052808a6001600160a01b03168152602001896001600160a01b0316815260200184815260200183815260200187815260200187426109fe91906115d4565b815260208082018890526000604092830181905284546001808201875595825290829020845160089092020180546001600160a01b03199081166001600160a01b03938416178255928501519581018054909316959091169490941790558101516002830155606081015160038301556080810151600483015560a0810151600583015560c0810151600683015560e00151600790910155610a9e610d7d565b15610aab57610aab610c8c565b604080516001600160a01b038a8116825289166020820152908101879052606081018690526080810185905233907feeea1e0a2885121cfb92ca69fb90e6c5df8a225dc48b4c983e30ab01ecd06f769060a00160405180910390a25050505050505050565b610b18611296565b6001600160a01b0383166000908152600260205260409020548210610b7f5760405162461bcd60e51b815260206004820152601960248201527f4f7264657220696e646578206f7574206f6620626f756e647300000000000000604482015260640161046d565b6001600160a01b0383166000908152600260205260408120805484908110610ba957610ba9611520565b90600052602060002090600802019050600081600701548260060154610bcf9190611646565b90506000826003015482610be39190611605565b6040805160a0808201835288825282516101008101845287546001600160a01b039081168252600189015416602082810191909152600289015482860152600389015460608084019190915260048a015460808085019190915260058b01549484019490945260068a015460c084015260079099015460e083015283015291810192909252662386f26fc100009482019490945260009381019390935250909150505b92915050565b610c94610fad565b60005b33600090815260026020526040902054811015610d0257336000908152600260205260409020805482908110610ccf57610ccf611520565b9060005260206000209060080201600501544210610cf057610cf0816103f5565b80610cfa8161154c565b915050610c97565b50610d0d6001600055565b565b60026020528160005260406000208181548110610d2b57600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701546001600160a01b03968716995094909516965091949093919288565b6000805b33600090815260026020526040902054811015610deb57336000908152600260205260409020805482908110610db957610db9611520565b9060005260206000209060080201600501544210610dd957600191505090565b80610de38161154c565b915050610d81565b5090565b6001600160a01b0381166000908152600260209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610eb257600084815260209081902060408051610100810182526008860290920180546001600160a01b039081168452600180830154909116848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460e08301529083529092019101610e27565b505050509050919050565b6107ba838383604051602401610ed5939291906116b5565b60408051601f198184030181529190526020810180516001600160e01b03166307e763af60e51b179052611007565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610f5e908590611013565b50505050565b610fa98282604051602401610f7a9291906116e8565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052611007565b5050565b600260005414156110005760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161046d565b6002600055565b611010816110e8565b50565b6000611068826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111099092919063ffffffff16565b9050805160001480611089575080806020019051810190611089919061158d565b6107ba5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161046d565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b60606111188484600085611120565b949350505050565b6060824710156111815760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161046d565b600080866001600160a01b0316858760405161119d919061170a565b60006040518083038185875af1925050503d80600081146111da576040519150601f19603f3d011682016040523d82523d6000602084013e6111df565b606091505b50915091506111f0878383876111fb565b979650505050505050565b60608315611267578251611260576001600160a01b0385163b6112605760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161046d565b5081611118565b611118838381511561127c5781518083602001fd5b8060405162461bcd60e51b815260040161046d9190611726565b6040518060a001604052806000815260200161130260405180610100016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b81526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461133457600080fd5b919050565b60006020828403121561134b57600080fd5b6113548261131d565b9392505050565b60018060a01b038082511683528060208301511660208401525060408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b8051825260208101516113cb602084018261135b565b50604081015161012083015260608101516101408301526080015161016090910152565b6020808252825182820181905260009190848201906040850190845b818110156114325761141e8385516113b5565b92840192610180929092019160010161140b565b50909695505050505050565b60006020828403121561145057600080fd5b5035919050565b600080600080600060a0868803121561146f57600080fd5b6114788661131d565b94506114866020870161131d565b94979496505050506040830135926060810135926080909101359150565b600080604083850312156114b757600080fd5b6114c08361131d565b946020939093013593505050565b6101808101610c8682846113b5565b6020808252825182820181905260009190848201906040850190845b818110156114325761150c83855161135b565b9284019261010092909201916001016114f9565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561156057611560611536565b5060010190565b634e487b7160e01b600052604160045260246000fd5b8051801515811461133457600080fd5b60006020828403121561159f57600080fd5b6113548261157d565b600080604083850312156115bb57600080fd5b825191506115cb6020840161157d565b90509250929050565b600082198211156115e7576115e7611536565b500190565b6000602082840312156115fe57600080fd5b5051919050565b600081600019048311821515161561161f5761161f611536565b500290565b60008261164157634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561165857611658611536565b500390565b60005b83811015611678578181015183820152602001611660565b83811115610f5e5750506000910152565b600081518084526116a181602086016020860161165d565b601f01601f19169290920160200192915050565b6060815260006116c86060830186611689565b6001600160a01b0394851660208401529290931660409091015292915050565b6040815260006116fb6040830185611689565b90508260208301529392505050565b6000825161171c81846020870161165d565b9190910192915050565b602081526000611354602083018461168956fea2646970667358221220b8a3e634645fd8c67b601ce82bd70876b2f88e58cb28f559d99a9742f512541964736f6c634300080a0033";

type DCAFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DCAFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DCAFacet__factory extends ContractFactory {
  constructor(...args: DCAFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DCAFacet & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DCAFacet__factory {
    return super.connect(runner) as DCAFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DCAFacetInterface {
    return new Interface(_abi) as DCAFacetInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DCAFacet {
    return new Contract(address, _abi, runner) as unknown as DCAFacet;
  }
}
